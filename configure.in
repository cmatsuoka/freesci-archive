
AC_PREREQ(2.13)
AC_INIT(acinclude.m4)
AM_CONFIG_HEADER(config.h)
AM_INIT_AUTOMAKE(freesci, 0.2.6)

AC_PROG_CC
AC_PROG_RANLIB
AC_CHECK_HEADERS(sys/soundcard.h)
AC_CHECK_HEADERS(obstack.h)
AC_CHECK_HEADERS(dirent.h)
AC_CHECK_HEADERS(unistd.h)
AC_CHECK_HEADERS(fnmatch.h)
AC_CHECK_HEADERS(readline/readline.h, [	ac_readline="-lreadline" ], [ ac_readline="" ])
AC_SUBST(ac_readline)
AC_CHECK_HEADERS(readline/history.h)
AC_CHECK_HEADERS(getopt.h)
AC_CHECK_FUNCS(pipe socketpair fork sched_yield memfrob ffs getopt_long)
AC_PATH_GGI
AC_PATH_CURSES
AC_PATH_X

if test "no_x" != yes; then
	AC_PATH_GLX
fi
AC_SUBST(ac_glx_libraries)

AM_PROG_LEX
AC_PROG_YACC
AM_PATH_GLIB(1.2.0,[
		CFLAGS="$CFLAGS $GLIB_CFLAGS"
#		LDFLAGS="$LDFLAGS $GLIB_LIBS"
		LIBS="$LIBS $GLIB_LIBS"
		AC_SUBST(ac_glib_includes)
		AC_SUBST(ac_glib_libraries)
	], 
	[
#if glib was't found
		AC_MSG_ERROR([You must install a recent version of glib to compile this package!])
	])

AC_PATH_PNG

AC_ARG_WITH(efence,
	[  --with-efence            link against libefence (for debugging)],
	[LIBS="$LIBS -lefence"],
	[LIBS="$LIBS -lc"])

AC_ARG_WITH(Wall,
	[  --with-Wall		   compile using -Wall],
	[CFLAGS="-Wall $CFLAGS"],
	[])

AC_C_PARAMETRIZED_BIGENDIAN

AC_OUTPUT(Makefile    \
	doc/Makefile \
        doc/misc/Makefile \
	src/Makefile  \
	src/scicore/Makefile \
	src/engine/Makefile \
	src/graphics/Makefile \
	src/include/Makefile \
	src/tools/Makefile \
	src/win32/Makefile \
	src/sound/Makefile)
